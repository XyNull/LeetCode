import java.util.LinkedList;
import java.util.Queue;

public class Recursion {
	public static TreeLinkNode treeBuilder(int[] n){
    	if(n.length == 0)
			return null;
    	
    	TreeLinkNode root = new TreeLinkNode(n[0]);
    	Queue<TreeLinkNode> q = new LinkedList<TreeLinkNode>();
    	q.add(root);
    	int num = 1;
    	
    	//levels traversal
    	while(num < n.length){
    		TreeLinkNode currect = q.poll();
    		if(n[num] == 0) num++;
    		else currect.left = new TreeLinkNode(n[num++]);
    		
    		if(num > n.length-1) break;
    		
    		if(n[num] == 0) num++;
    		else currect.right = new TreeLinkNode(n[num++]);
    		
    		if(currect.left != null) q.add(currect.left);
    		if(currect.right != null) q.add(currect.right);
    	}
    	
    	return root;
	}
	
	public static void main(String[] args){
		int[] a = {2,1,3,4,7,9,1,2,0,1,5,0,0,8,8,0,0,0,0,7};
		connect(treeBuilder(a));
	}
	
	public static void connect(TreeLinkNode root) {
    	if(root == null || (root.left == null && root.right == null))
			return;
    	TreeLinkNode existSon,existNext = root.next;

		if(root.left != null && root.right != null){
			root.left.next  = root.right;
			existSon = root.right;
		}
		else{
			if(root.left != null) existSon = root.left;
			else existSon = root.right;
		}

    	if(existNext != null){
    		while(existNext.left == null && existNext.right == null){
    			if(existNext.next != null) existNext = existNext.next;
    			else break;
    		}
    		
    		if(existNext.left != null) 
    			existSon.next = existNext.left;
    		else existSon.next = existNext.right;
    	}
    	
    	connect(root.left);
    	connect(root.right);
    }
}
